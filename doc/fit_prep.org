#+PROPERTY: header-args:jupyter-python+ :async t
#+PROPERTY: header-args:jupyter-python+ :session /global/u2/m/mkramer/.local/share/jupyter/runtime/kernel-18016.json

* Session setup
#+begin_src jupyter-python :results silent
import ROOT as R

base = "/global/u2/m/mkramer/mywork/ThesisAnalysis/samples/beda.mine/example/LBNL/"
#+end_src

* Functions
#+begin_src jupyter-python :results silent
def bin_desc(hist):
    N = hist.GetNbinsX()
    lows = ['%.3g' % hist.GetBinLowEdge(i) for i in range(1, N+1)]
    lows = ', '.join(lows)
    high = hist.GetBinLowEdge(N) + hist.GetBinWidth(N)
    print(f'{N} [ {lows}, {high} ]')
#+end_src

* Studies
** Histograms
*** accidental_eprompt_shapes_Xad.root
#+begin_src jupyter-python :results silent
f_acc = R.TFile(base + "accidental_eprompt_shapes_8ad_LBNL.root")
#+end_src

#+begin_src jupyter-python :results output drawer
bin_desc(f_acc.h_accidental_eprompt_inclusive_eh1_ad1)
#+end_src

#+RESULTS:
:results:
37 [ 0.7, 1, 1.2, 1.4, 1.6, 1.8, 2, 2.2, 2.4, 2.6, 2.8, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.2, 4.4, 4.6, 4.8, 5, 5.2, 5.4, 5.6, 5.8, 6, 6.2, 6.4, 6.6, 6.8, 7, 7.2, 7.4, 7.6, 7.8, 8, 12.0 ]
:end:

#+begin_src jupyter-python :results output drawer
bin_desc(f_acc.h_accidental_eprompt_fine_inclusive_eh1_ad1)
#+end_src

#+RESULTS:
:results:
240 [ 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2, 2.05, 2.1, 2.15, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6, 2.65, 2.7, 2.75, 2.8, 2.85, 2.9, 2.95, 3, 3.05, 3.1, 3.15, 3.2, 3.25, 3.3, 3.35, 3.4, 3.45, 3.5, 3.55, 3.6, 3.65, 3.7, 3.75, 3.8, 3.85, 3.9, 3.95, 4, 4.05, 4.1, 4.15, 4.2, 4.25, 4.3, 4.35, 4.4, 4.45, 4.5, 4.55, 4.6, 4.65, 4.7, 4.75, 4.8, 4.85, 4.9, 4.95, 5, 5.05, 5.1, 5.15, 5.2, 5.25, 5.3, 5.35, 5.4, 5.45, 5.5, 5.55, 5.6, 5.65, 5.7, 5.75, 5.8, 5.85, 5.9, 5.95, 6, 6.05, 6.1, 6.15, 6.2, 6.25, 6.3, 6.35, 6.4, 6.45, 6.5, 6.55, 6.6, 6.65, 6.7, 6.75, 6.8, 6.85, 6.9, 6.95, 7, 7.05, 7.1, 7.15, 7.2, 7.25, 7.3, 7.35, 7.4, 7.45, 7.5, 7.55, 7.6, 7.65, 7.7, 7.75, 7.8, 7.85, 7.9, 7.95, 8, 8.05, 8.1, 8.15, 8.2, 8.25, 8.3, 8.35, 8.4, 8.45, 8.5, 8.55, 8.6, 8.65, 8.7, 8.75, 8.8, 8.85, 8.9, 8.95, 9, 9.05, 9.1, 9.15, 9.2, 9.25, 9.3, 9.35, 9.4, 9.45, 9.5, 9.55, 9.6, 9.65, 9.7, 9.75, 9.8, 9.85, 9.9, 9.95, 10, 10.1, 10.1, 10.2, 10.2, 10.2, 10.3, 10.4, 10.4, 10.5, 10.5, 10.6, 10.6, 10.7, 10.7, 10.8, 10.8, 10.9, 10.9, 11, 11, 11.1, 11.1, 11.2, 11.2, 11.2, 11.3, 11.4, 11.4, 11.5, 11.5, 11.6, 11.6, 11.7, 11.7, 11.8, 11.8, 11.9, 11.9, 12, 12.000000000000002 ]
:end:

*** ibd_eprompt_shapes_Xad.root
#+begin_src jupyter-python :results silent
f_ibd = R.TFile(base + "ibd_eprompt_shapes_8ad_LBNL.root")
#+end_src

#+begin_src jupyter-python :results output drawer
bin_desc(f_ibd.h_ibd_eprompt_inclusive_eh1_ad1)
#+end_src

#+RESULTS:
:results:
37 [ 0.7, 1, 1.2, 1.4, 1.6, 1.8, 2, 2.2, 2.4, 2.6, 2.8, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.2, 4.4, 4.6, 4.8, 5, 5.2, 5.4, 5.6, 5.8, 6, 6.2, 6.4, 6.6, 6.8, 7, 7.2, 7.4, 7.6, 7.8, 8, 12.0 ]
:end:

#+begin_src jupyter-python :results output drawer
bin_desc(f_ibd.h_ibd_eprompt_fine_inclusive_eh1_ad1)
#+end_src

#+RESULTS:
:results:
240 [ 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2, 2.05, 2.1, 2.15, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6, 2.65, 2.7, 2.75, 2.8, 2.85, 2.9, 2.95, 3, 3.05, 3.1, 3.15, 3.2, 3.25, 3.3, 3.35, 3.4, 3.45, 3.5, 3.55, 3.6, 3.65, 3.7, 3.75, 3.8, 3.85, 3.9, 3.95, 4, 4.05, 4.1, 4.15, 4.2, 4.25, 4.3, 4.35, 4.4, 4.45, 4.5, 4.55, 4.6, 4.65, 4.7, 4.75, 4.8, 4.85, 4.9, 4.95, 5, 5.05, 5.1, 5.15, 5.2, 5.25, 5.3, 5.35, 5.4, 5.45, 5.5, 5.55, 5.6, 5.65, 5.7, 5.75, 5.8, 5.85, 5.9, 5.95, 6, 6.05, 6.1, 6.15, 6.2, 6.25, 6.3, 6.35, 6.4, 6.45, 6.5, 6.55, 6.6, 6.65, 6.7, 6.75, 6.8, 6.85, 6.9, 6.95, 7, 7.05, 7.1, 7.15, 7.2, 7.25, 7.3, 7.35, 7.4, 7.45, 7.5, 7.55, 7.6, 7.65, 7.7, 7.75, 7.8, 7.85, 7.9, 7.95, 8, 8.05, 8.1, 8.15, 8.2, 8.25, 8.3, 8.35, 8.4, 8.45, 8.5, 8.55, 8.6, 8.65, 8.7, 8.75, 8.8, 8.85, 8.9, 8.95, 9, 9.05, 9.1, 9.15, 9.2, 9.25, 9.3, 9.35, 9.4, 9.45, 9.5, 9.55, 9.6, 9.65, 9.7, 9.75, 9.8, 9.85, 9.9, 9.95, 10, 10.1, 10.1, 10.2, 10.2, 10.2, 10.3, 10.4, 10.4, 10.5, 10.5, 10.6, 10.6, 10.7, 10.7, 10.8, 10.8, 10.9, 10.9, 11, 11, 11.1, 11.1, 11.2, 11.2, 11.2, 11.3, 11.4, 11.4, 11.5, 11.5, 11.6, 11.6, 11.7, 11.7, 11.8, 11.8, 11.9, 11.9, 12, 12.000000000000002 ]
:end:


* What we need
- (Note: Should add something like _$tag@$config to end of these filenames)
- See ShapeFit/Binning.cc for binning schemes
** Histograms
*** accidental_eprompt_shapes_Xad.root
**** h_accidental_eprompt_inclusive_ehI_adJ
See ~evis_lbnl~
**** h_accidental_eprompt_fine_inclusive_ehI_adJ
See ~evis_fine~
*** ibd_eprompt_shapes_Xad.root
**** h_ibd_eprompt_inclusive_ehI_adJ
See ~evis_lbnl~
**** h_ibd_eprompt_fine_inclusive_ehI_adJ
See ~evis_fine~
** Theta13-inputs_P17B_inclusive_Xad.txt
- Columns are separated by tabs!
- Not listing boilerplate comments/fields that can just be taken verbatim from the example
*** Timestamps (unused?)
# Row 0 ==>  Start UTC  |  End UTC | Start date and time
1	0	1324684800	1386374400	2011-12-24 00:00:00

Copy verbatim for now. (Use DB later.)
**** TODO Check whether the fitter actually uses this

*** Number of events
# Row 1 ==>  Observed number of events in AD1 to AD8 
1	1	727758	737441	688756	677816	98505	98906	98152	99167

Get from h_ibd_d1 or ibd_AD1 etc. in stage2 file.

*** Livetime
# Row 2 ==>  Live time in days for AD1 to AD8
1	2	1349.834	1349.834	1353.601	1353.601	1351.874	1351.874	1351.874	1351.874

Get from results.livetime_s in stage2 file

*** Muon veto efficiency
# Row 3 ==>  Muon veto efficiency for AD1 to AD8
1	3	0.8233	0.8196	0.8516	0.8501	0.9832	0.9830	0.9828	0.9830

Get from livetime-weighted mean of vetoEff in stage2.results.

*** DMC efficiency
# Row 4 ==>  Multiplicity cut efficiency for AD1 to AD8
1	4	0.9770	0.9774	0.9782	0.9781	0.9785	0.9787	0.9785	0.9784

Get from livetime-weighted mean of dmcEff in stage2.results.

*** =Unused?=
# Row 5 ==>  6 MeV neutron cut efficiency for AD1 to AD8
1	5	0.88	0.88	0.88	0.88	0.88	0.88	0.88	0.88
# Row 6 ==>  Uncorrelated reactor power uncertainty (relative error in %)
1	6	0.8	0.8	0.8	0.8	0.8	0.8	0.8	0.8
# Row 7 ==>  Total IBD cut efficiency uncertainty (relative error in %)
1	7	0.3	0.3	0.3	0.3	0.3	0.3	0.3	0.3

*** Target mass
# Row 8 ==>  Total target mass for AD1 to AD8 (kg)
1	8	19941	19966	19891	19945	19913	19991	19892	19931

Copy verbatim.

*** Total bkg
# Row 9  ==>  Expected number of bkg events per live day (AD1 to AD8)
# Row 10 ==>  Absolute uncertainty on the bkg estimates per live day
1	9	11.975	12.04	8.3774	8.7506	1.4101	1.2629	1.265	1.5915
1	10	0.98287	0.98307	0.70861	0.71115	0.080822	0.077643	0.077645	0.080857

Sum of the remaining rows.

*** Acc bkg
# Row 11 ==>  Expected number of accidental events per live day (AD1 to AD8)
# Row 12 ==>  Absolute uncertainty on the accidental bkg per live day
1	11	7.608	7.509	5.534	5.579	0.819	0.753	0.778	0.838
1	12	0.0117	0.0115	0.0098	0.0094	0.0036	0.0032	0.0033	0.0035

Livetime-weighted sum of accDaily[Err] in stage2.results.

*** Li9 bkg
# Row 13 ==>  Expected number of li9/he8 events per live day (AD1 to AD8)
# Row 14 ==>  Absolute uncertainty on the li9/he8 bkg per live day
1	13	2.52	2.52	1.59	1.59	0.21	0.21	0.21	0.21
1	14	0.68	0.68	0.46	0.46	0.07	0.07	0.07	0.07

Reimplement Li9Calc in python and take the livetime-weighted sum of them. Ideally should be livetime-weighted sum of accDaily[Err] in stage2.results. But Li9Calc is broken.

*** Fast-n bkg
# Row 15 ==>  Expected number of fast-n events per live day (AD1 to AD8)
# Row 16 ==>  Absolute uncertainty on the fast-n bkg per live day
1	15	0.843	0.843	0.638	0.638	0.053	0.053	0.053	0.053
1	16	0.083	0.083	0.062	0.062	0.009	0.009	0.009	0.009

Copy verbatim. (Verify veto/dmc efficiency convention, scale if needed).

*** AmC bkg
# Row 17 ==>  Expected number of AmC-corr events per live day (AD1 to AD8)
# Row 18 ==>  Absolute uncertainty on the AmC-corr bkg per live day
1	17	0.15	0.15	0.12	0.14	0.04	0.03	0.03	0.04
1	18	0.07	0.07	0.06	0.06	0.02	0.01	0.02	0.02

Copy verbatim. (Verify veto/dmc efficiency convention, scale if needed).

*** Alpha-n bkg
# Row 19 ==>  Expected number of alpha-n events per live day (AD1 to AD8)
# Row 20 ==>  Absolute uncertainty on the alpha-n bkg per live day
1	19	0.08	0.06	0.04	0.06	0.04	0.04	0.03	0.04
1	20	0.04	0.03	0.02	0.03	0.02	0.02	0.02	0.02

Copy verbatim. (Verify veto/dmc efficiency convention, scale if needed).
