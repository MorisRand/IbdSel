#+PROPERTY: header-args:jupyter-python+ :async t
#+PROPERTY: header-args:jupyter-python+ :session /global/u2/m/mkramer/.local/share/jupyter/runtime/kernel-12332.json

* Preliminaries

NOTE: See ob-ipython--render to fix the mangling of DF formatting.

#+begin_src jupyter-python :results silent
import os
import pandas as pd

pd.options.display.max_rows = 100
# since we're using jupyter console intead of ipython
# pd.options.display.notebook_repr_html = False   # needed?
%precision 3

botbot = (5000, 1.6e5)
#+end_src

#+begin_src jupyter-python :results silent
path = os.path.join(os.getenv('IBDSEL_HOME'),
                    'static/li9_data/matt_Li9_rates.txt')

df = pd.read_csv(path, sep=r'\s+', header=None,
                 names=['hall', 'peLow', 'peHigh', 'rateNom', 'statUnc',
                        'rate12B0', 'rate12B15', 'rate8He0']) \
       .set_index(['hall', 'peLow', 'peHigh'])
#+end_src

* The raw data

#+begin_src jupyter-python :results raw drawer
df
#+end_src

#+RESULTS:
:results:
# Out[6]:
#+BEGIN_EXAMPLE
                      rateNom   statUnc  rate12B0  rate12B15    rate8He0
hall peLow  peHigh                                                      
1    5000   160000    162.947    50.707   168.060    171.729     161.293
     160000 250000    385.897    58.981   423.045    445.649     389.411
     250000 9999999  1509.470   119.632  1736.689   1805.589    1471.484
     160000 260000   3405.470  2320.338  3603.406   3447.981    3303.624
     260000 9999999  1500.977   115.488  1724.537   1514.777    1466.166
     160000 270000    414.291    60.554   435.546    469.919     377.048
     270000 9999999  1489.397   108.652  1706.485   1490.186    1443.989
     160000 280000    435.357    61.795   465.383    477.834     446.138
     280000 9999999  1450.712   106.154  1673.806   1453.426    1404.493
     160000 290000    447.559    63.058   513.001    519.601     464.589
     290000 9999999  1425.982   108.646  1639.328   1427.514    1380.740
     160000 300000    471.168    64.956   555.039    558.897     533.684
     300000 9999999  1385.947   106.834  1599.471   1387.546    1344.391
     160000 310000    496.259    76.453   594.169    601.996     494.077
     310000 9999999  1359.796   105.463  1569.150   1361.511    1319.073
     160000 320000    532.985   192.621   618.999    626.382     526.706
     320000 9999999  1339.401   103.390  1538.508   1339.961    1299.605
     160000 330000    582.845   188.527   655.209    672.429     632.161
     330000 9999999  1290.767   100.928  1486.838   1291.794    1250.455
     160000 340000    609.135   193.498   689.743    628.259     649.902
     340000 9999999  1266.004    99.962  1462.236   1271.211    1233.497
     160000 350000    614.025   181.977   706.823    731.720     602.435
     350000 9999999  1256.784    99.007  1437.916   1272.493    1221.878
2    5000   160000     84.471    25.277    96.595     98.899      94.197
     160000 250000    170.836   148.465   189.099    185.912     182.476
     250000 9999999  1266.343   105.743  1352.468   1368.761    1250.455
     160000 260000   1651.712  3173.931  1759.154     51.131  232621.039
     260000 9999999  1247.974   102.274  1327.949   1377.809    1221.934
     160000 270000    207.212   150.624   230.282    241.729     217.132
     270000 9999999  1195.843   103.387  1291.756   1336.403    1183.631
     160000 280000    222.117   147.868   243.250    244.782     195.899
     280000 9999999  1168.704   101.619  1274.603   1340.533    1153.433
     160000 290000    241.240   148.526   260.764    275.546     204.831
     290000 9999999  1152.195   100.503  1254.080   1146.816       0.000
     160000 300000    273.448   147.005   286.199    240.380     286.204
     300000 9999999  1156.203    98.527  1229.955   1178.863    1111.294
     160000 310000    305.006   141.473   313.005    311.895     287.825
     310000 9999999  1141.903    92.121  1207.334   1268.929    1083.977
     160000 320000    346.251   136.827   348.666    358.547     309.663
     320000 9999999  1060.629    94.044  1174.078   1084.172    1053.396
     160000 330000    387.157   128.644   387.429    389.294     345.468
     330000 9999999  1077.011    88.113  1148.753   1071.115    1035.705
     160000 340000    401.862   125.430   411.693    155.626     392.875
     340000 9999999  1045.136    93.603  1122.702   1047.717    1010.925
     160000 350000    424.932   121.508   437.539    406.825     376.010
     350000 9999999  1004.208    91.296  1086.475   1136.069     974.187
3    5000   160000     63.460    28.405    63.616     45.641       0.094
     160000 250000    210.792    76.997   220.790    224.232     201.261
     250000 9999999  1071.221    94.186  1154.549   1061.390    1022.310
     160000 260000    482.631   230.752   582.423    520.783     477.962
     260000 9999999  1062.467    82.151  1132.489   1043.216    1009.098
     160000 270000    239.331    85.656   249.845    253.270     240.902
     270000 9999999  1046.968    82.886  1125.927   1037.725    1002.226
     160000 280000    254.613    83.880   264.128    268.929     257.344
     280000 9999999  1021.266    73.325  1111.788   1011.446     985.634
     160000 290000    261.369    82.312   273.936    272.998     258.549
     290000 9999999  1006.467    75.226  1098.388   1012.507     985.489
     160000 300000    275.496    86.875   279.843    278.877     273.426
     300000 9999999   996.819    75.134  1091.305   1002.776     978.234
     160000 310000    280.254    90.827   290.695    291.728     283.668
     310000 9999999   982.608    75.434  1080.491    986.294     955.064
     160000 320000    292.533    93.400   303.613    308.314     296.468
     320000 9999999   966.555    75.787  1067.541    973.321     942.063
     160000 330000    311.173    96.026   321.221    329.120     309.480
     330000 9999999   935.524    79.012  1048.389    944.506     916.517
     160000 340000    324.241    97.494   330.325    339.417     317.402
     340000 9999999     0.677     0.233  1039.879    938.916     907.890
     160000 350000    342.082    98.785   350.253    355.871     339.112
     350000 9999999     0.677     0.239  1023.848    939.337     894.901
#+END_EXAMPLE
:end:

* Denominators

Livetime, effective #det, veto eff, mult eff, dt eff

#+begin_src jupyter-python :results silent
denom1 = 1737 * 1.889 * 0.82 * 0.97 * 0.96
denom2 = 1729 * 1.89 * 0.85 * 0.97 * 0.96
denom3 = 1737 * 3.892 * 0.98 * 0.97 * 0.96
#+end_src

* Calculating daily rates from the raw data

We use the three ranges that most closely correspond to the four in Chris's technote.

** EH1

#+begin_src jupyter-python :results raw drawer
d.xs(1).loc[[botbot, (1.6e5, 3e5), (3e5, inf)]]
#+end_src

#+RESULTS:
:results:
# Out[118]:
#+BEGIN_EXAMPLE
                 rateNom  statUnc  rate12B0  rate12B15  rate8He0
peLow  peHigh                                                   
5000   160000    162.947   50.707   168.060    171.729   161.293
160000 300000    471.168   64.956   555.039    558.897   533.684
300000 9999999  1385.947  106.834  1599.471   1387.546  1344.391
#+END_EXAMPLE
:end:

#+begin_src jupyter-python :results raw drawer
(162.947 / 0.15  +  471.168 / 0.15  +  1385.947 / 0.75) / denom1
#+end_src

#+RESULTS:
:results:
# Out[169]:
: 2.425
:end:

We expect 2.52.

** EH2

#+begin_src jupyter-python :results raw drawer
d.xs(2).loc[[botbot, (1.6e5, 3e5), (3e5, inf)]]
#+end_src

#+RESULTS:
:results:
# Out[154]:
#+BEGIN_EXAMPLE
                 rateNom  statUnc  rate12B0  rate12B15  rate8He0
peLow  peHigh                                                   
5000   160000     84.471   25.277    96.595     98.899    94.197
160000 300000    273.448  147.005   286.199    240.380   286.204
300000 9999999  1156.203   98.527  1229.955   1178.863  1111.294
#+END_EXAMPLE
:end:

#+begin_src jupyter-python :results raw drawer
(84.471 / 0.15  +  273.448 / 0.15  +  1156.203 / 0.75) / denom2
#+end_src

#+RESULTS:
:results:
# Out[170]:
: 1.519
:end:

We expect 1.59.

** EH3

#+begin_src jupyter-python :results raw drawer
d.xs(3).loc[[botbot, (1.6e5, 3e5), (3e5, inf)]]
#+end_src

#+RESULTS:
:results:
# Out[156]:
#+BEGIN_EXAMPLE
                rateNom  statUnc  rate12B0  rate12B15  rate8He0
peLow  peHigh                                                  
5000   160000    63.460   28.405    63.616     45.641     0.094
160000 300000   275.496   86.875   279.843    278.877   273.426
300000 9999999  996.819   75.134  1091.305   1002.776   978.234
#+END_EXAMPLE
:end:

#+begin_src jupyter-python :results raw drawer
(63.46 / 0.40  +  275.496 / 0.40  +  996.819 / 0.75) / denom3
#+end_src

#+RESULTS:
:results:
# Out[171]:
: 0.353
:end:

No good! We expect 0.21. What if we multiply the high-range rate by 0.21? (This would imply a bizarre difference in conventions between the far and the near halls.)

#+begin_src jupyter-python :results raw drawer
(63.46 / 0.40  +  275.496 / 0.40  +  996.819 / 0.75 * 0.21) / denom3
#+end_src

#+RESULTS:
:results:
# Out[172]:
: 0.183
:end:

That's better... but what's going on?

** EH3 / technote (copied from below)

#+begin_src jupyter-python :results raw drawer
(53 / 0.40  +  274 / 0.40  +  130 / 0.40 * 0.21 + 1585 / 0.75 * 0.21) / denom3
#+end_src

#+RESULTS:
:results:
# Out[179]:
: 0.216
:end:

* Reproducing the technote's calculations

These all look pretty good.

** EH1

#+begin_src jupyter-python :results raw drawer
(165 * 1 / 0.15 + 468 * 1 / 0.15 + 234 * 0.21 / 0.15 + 6270 * 0.21 / 0.75) / denom1
#+end_src

#+RESULTS:
:results:
# Out[176]:
: 2.516
:end:

** EH2

#+begin_src jupyter-python :results raw drawer
(85 * 1 / 0.15 + 275 * 1 / 0.15 + 239 * 0.21 / 0.15 + 4973 * 0.21 / 0.75) / denom2
#+end_src

#+RESULTS:
:results:
# Out[177]:
: 1.596
:end:

** EH3

#+begin_src jupyter-python :results raw drawer
(53 * 1 / 0.40 + 274 * 1 / 0.40 + 130 * 0.21 / 0.40 + 1585 * 0.21 / 0.75) / denom3
#+end_src

#+RESULTS:
:results:
# Out[178]:
: 0.216
:end:
